#! /bin/sh /usr/share/dpatch/dpatch-run
## 00_01_upstream_0.9.7-2.dpatch by  <hmh@debian.org>
##
## All lines beginning with `## DP:' are a description of the patch.
## DP: Upstream patch 0.9.7-2

@DPATCH@
diff -urNad hplip~/io/hpiod/channel.cpp hplip/io/hpiod/channel.cpp
--- hplip~/io/hpiod/channel.cpp	2005-11-22 21:23:11.000000000 -0200
+++ hplip/io/hpiod/channel.cpp	2005-12-07 01:17:46.008381088 -0200
@@ -49,7 +49,7 @@
 
 int Channel::WriteData(unsigned char *data, int length, char *sendBuf, int *result)
 {
-   char res[] = "msg=ChannelDataOutResult\nresult-code=%d\nbytes-written=%d\n"; 
+   const char res[] = "msg=ChannelDataOutResult\nresult-code=%d\nbytes-written=%d\n"; 
    int len, size, sLen, total=0;
 
    *result=R_IO_ERROR;
@@ -77,7 +77,7 @@
 
 int Channel::CutBuf(char *sendBuf, int length)
 {
-   char res[] =  "msg=ChannelDataInResult\nresult-code=%d\nlength=%d\ndata:\n";
+   const char res[] =  "msg=ChannelDataInResult\nresult-code=%d\nlength=%d\ndata:\n";
    int sendLen, total;
 
    if (rcnt > length)
@@ -114,7 +114,7 @@
 ******************************************************************************/
 int Channel::ReadData(int length, int timeout, char *sendBuf, int sendBufLength, int *result)
 {
-   char res[] = "msg=ChannelDataInResult\nresult-code=%d\n";
+   const char res[] = "msg=ChannelDataInResult\nresult-code=%d\n";
    int len=0, sLen;
    char buffer[BUFFER_SIZE];
 
diff -urNad hplip~/io/hpiod/device.cpp hplip/io/hpiod/device.cpp
--- hplip~/io/hpiod/device.cpp	2005-11-22 21:23:11.000000000 -0200
+++ hplip/io/hpiod/device.cpp	2005-12-07 01:17:46.009380963 -0200
@@ -320,7 +320,7 @@
 
 int Device::Close(char *sendBuf, int *result)
 {
-   char res[] = "msg=DeviceCloseResult\nresult-code=%d\n";
+   const char res[] = "msg=DeviceCloseResult\nresult-code=%d\n";
    int len=0;
 
    *result = R_AOK;
@@ -344,7 +344,7 @@
 
 int Device::GetDeviceID(char *sendBuf, int slen, int *result)
 {
-   char res[] = "msg=DeviceIDResult\nresult-code=%d\n";
+   const char res[] = "msg=DeviceIDResult\nresult-code=%d\n";
    int len=0, idLen;
 
    *result = R_AOK;
@@ -392,9 +392,10 @@
 
 int Device::GetDeviceStatus(char *sendBuf, int *result)
 {
-   char res[] = "msg=DeviceStatusResult\nresult-code=%d\nstatus-code=%d\nstatus-name=%s\n";
+   const char res[] = "msg=DeviceStatusResult\nresult-code=%d\nstatus-code=%d\nstatus-name=%s\n";
+   const char eres[] = "msg=DeviceStatusResult\nresult-code=%d\n";
    int len=0, r;
-   unsigned char status;
+   unsigned int status;
    char vstatus[16];
 
    *result = R_AOK;
@@ -403,7 +404,7 @@
    {
       syslog(LOG_ERR, "invalid data link Device::GetDeviceStatus: %d\n", OpenFD);
       *result = R_INVALID_DESCRIPTOR;
-      len = sprintf(sendBuf, res, *result);  
+      len = sprintf(sendBuf, eres, *result);  
       goto ujmp;
    }
 
@@ -417,7 +418,7 @@
       {
          syslog(LOG_ERR, "unable to read Device::GetDeviceStatus: %m\n");
          *result = R_IO_ERROR;
-         len = sprintf(sendBuf, res, *result);  
+         len = sprintf(sendBuf, eres, *result);  
          goto ujmp;
       }
    }
@@ -425,7 +426,7 @@
    {
       syslog(LOG_ERR, "unable to lock Device::GetDeviceStatus: %m\n");
       *result = R_IO_ERROR;
-      len = sprintf(sendBuf, res, *result);  
+      len = sprintf(sendBuf, eres, *result);  
       goto ujmp;
    }
 
@@ -448,7 +449,7 @@
 
 int Device::WriteData(unsigned char *data, int length, int channel, char *sendBuf, int *result)
 {   
-   char res[] = "msg=ChannelDataOutResult\nresult-code=%d\n";
+   const char res[] = "msg=ChannelDataOutResult\nresult-code=%d\n";
    int sLen;
 
    if (OpenFD<0)
@@ -486,7 +487,7 @@
 
 int Device::ReadData(int length, int channel, int timeout, char *sendBuf, int slen, int *result)
 {   
-   char res[] = "msg=ChannelDataInResult\nresult-code=%d\n";
+   const char res[] = "msg=ChannelDataInResult\nresult-code=%d\n";
    int sLen;
 
    if (OpenFD<0)
@@ -608,7 +609,7 @@
 
 int Device::ChannelOpen(char *sn, int *channel, char *sendBuf, int *result)
 {
-   char res[] = "msg=ChannelOpenResult\nresult-code=%d\n";
+   const char res[] = "msg=ChannelOpenResult\nresult-code=%d\n";
    Channel *pC;
    int len=0;
    unsigned char sockid;
@@ -682,7 +683,7 @@
 int Device::ChannelClose(int channel, char *sendBuf, int *result)
 {
    Channel *pC = pChannel[channel];
-   char res[] = "msg=ChannelCloseResult\nresult-code=%d\n";
+   const char res[] = "msg=ChannelCloseResult\nresult-code=%d\n";
    int len=0;
 
    if (pC == NULL)
diff -urNad hplip~/io/hpiod/dot4.cpp hplip/io/hpiod/dot4.cpp
--- hplip~/io/hpiod/dot4.cpp	2005-11-10 17:30:24.000000000 -0200
+++ hplip/io/hpiod/dot4.cpp	2005-12-07 01:17:46.010380837 -0200
@@ -707,7 +707,7 @@
 
 int Dot4Channel::Open(char *sendBuf, int *result)
 {
-   char res[] = "msg=OpenChannelResult\nresult-code=%d\n";
+   const char res[] = "msg=OpenChannelResult\nresult-code=%d\n";
    int supportedProtocols=0;
    int twoints[2];
    int len, slen;
@@ -797,9 +797,9 @@
 
 int Dot4Channel::Close(char *sendBuf, int *result)
 {
-   char res[] = "msg=ChannelCloseResult\nresult-code=%d\n";
+   const char res[] = "msg=ChannelCloseResult\nresult-code=%d\n";
    int len=0;
-   unsigned char nullByte=0;
+   //   unsigned char nullByte=0;
 
    *result = R_AOK;
 
@@ -826,7 +826,8 @@
       if (pDev->NewProtocol == USB_PROTOCOL_712)
       {
          ioctl(pDev->GetOpenFD(), LPIOC_HP_SET_CHANNEL, 78);  /* reset DOT4 (ECP channel-78) */
-         pDev->Write(pDev->GetOpenFD(), &nullByte, 1);  
+	 /* Nullbute is not necessary for dot4, causes USB High Speed blue-screen assert on PS2575. */
+	 //         pDev->Write(pDev->GetOpenFD(), &nullByte, 1);  
          ioctl(pDev->GetOpenFD(), LPIOC_HP_SET_CHANNEL, 0);   /* set raw mode (ECP channel-0) */
       }
       ioctl(pDev->GetOpenFD(), LPIOC_SET_PROTOCOL, pDev->CurrentProtocol);
@@ -842,7 +843,7 @@
 
 int Dot4Channel::WriteData(unsigned char *data, int length, char *sendBuf, int *result)
 {
-   char res[] = "msg=ChannelDataOutResult\nresult-code=%d\nbytes-written=%d\n"; 
+   const char res[] = "msg=ChannelDataOutResult\nresult-code=%d\nbytes-written=%d\n"; 
    int ret, len, size, sLen, dlen, total=0;
    int cnt=0;
 
@@ -927,7 +928,7 @@
  */
 int Dot4Channel::ReadData(int length, int timeout, char *sendBuf, int sendBufLength, int *result)
 {
-   char res[] = "msg=ChannelDataInResult\nresult-code=%d\n";
+   const char res[] = "msg=ChannelDataInResult\nresult-code=%d\n";
    int sendLen;
 
    *result=R_IO_ERROR;
diff -urNad hplip~/io/hpiod/jddevice.cpp hplip/io/hpiod/jddevice.cpp
--- hplip~/io/hpiod/jddevice.cpp	2005-11-22 21:23:12.000000000 -0200
+++ hplip/io/hpiod/jddevice.cpp	2005-12-07 01:17:46.010380837 -0200
@@ -113,7 +113,7 @@
 
 int JetDirectDevice::Close(char *sendBuf, int *result)
 {
-   char res[] = "msg=DeviceCloseResult\nresult-code=%d\n";
+   const char res[] = "msg=DeviceCloseResult\nresult-code=%d\n";
    int len=0;
 
    *result = R_AOK;
@@ -131,7 +131,7 @@
 
 int JetDirectDevice::GetDeviceStatus(char *sendBuf, int *result)
 {
-   char res[] = "msg=DeviceStatusResult\nresult-code=%d\nstatus-code=%d\nstatus-name=%s\n";
+   const char res[] = "msg=DeviceStatusResult\nresult-code=%d\nstatus-code=%d\nstatus-name=%s\n";
    int len=0;
    unsigned char status = NFAULT_BIT;
 
@@ -144,7 +144,7 @@
 
 int JetDirectDevice::WriteData(unsigned char *data, int length, int channel, char *sendBuf, int *result)
 {   
-   char res[] = "msg=ChannelDataOutResult\nresult-code=%d\n";
+   const char res[] = "msg=ChannelDataOutResult\nresult-code=%d\n";
    int sLen;
 
    if (pChannel[channel] == NULL)
@@ -163,7 +163,7 @@
 
 int JetDirectDevice::ReadData(int length, int channel, int timeout, char *sendBuf, int slen, int *result)
 {   
-   char res[] = "msg=ChannelDataInResult\nresult-code=%d\n";
+   const char res[] = "msg=ChannelDataInResult\nresult-code=%d\n";
    int sLen;
 
    if (pChannel[channel] == NULL)
diff -urNad hplip~/io/hpiod/mlc.cpp hplip/io/hpiod/mlc.cpp
--- hplip~/io/hpiod/mlc.cpp	2005-11-22 21:23:12.000000000 -0200
+++ hplip/io/hpiod/mlc.cpp	2005-12-07 01:17:46.011380712 -0200
@@ -709,7 +709,7 @@
 
 int MlcChannel::Open(char *sendBuf, int *result)
 {
-   char res[] = "msg=OpenChannelResult\nresult-code=%d\n";
+   const char res[] = "msg=OpenChannelResult\nresult-code=%d\n";
    int supportedProtocols=0;
    int twoints[2];
    int len, slen;
@@ -794,7 +794,7 @@
 
 int MlcChannel::Close(char *sendBuf, int *result)
 {
-   char res[] = "msg=ChannelCloseResult\nresult-code=%d\n";
+   const char res[] = "msg=ChannelCloseResult\nresult-code=%d\n";
    int len=0;
    unsigned char nullByte=0;
 
@@ -840,7 +840,7 @@
 
 int MlcChannel::WriteData(unsigned char *data, int length, char *sendBuf, int *result)
 {
-   char res[] = "msg=ChannelDataOutResult\nresult-code=%d\nbytes-written=%d\n"; 
+   const char res[] = "msg=ChannelDataOutResult\nresult-code=%d\nbytes-written=%d\n"; 
    int ret, len, size, sLen, dlen, total=0;
 
    *result=R_IO_ERROR;
@@ -915,7 +915,7 @@
  */
 int MlcChannel::ReadData(int length, int timeout, char *sendBuf, int sendBufLength, int *result)
 {
-   char res[] = "msg=ChannelDataInResult\nresult-code=%d\n";
+   const char res[] = "msg=ChannelDataInResult\nresult-code=%d\n";
    int sendLen;
 
    *result=R_IO_ERROR;
diff -urNad hplip~/io/hpiod/pp.cpp hplip/io/hpiod/pp.cpp
--- hplip~/io/hpiod/pp.cpp	2005-11-22 21:23:12.000000000 -0200
+++ hplip/io/hpiod/pp.cpp	2005-12-07 01:17:46.011380712 -0200
@@ -33,7 +33,7 @@
 
 int ParMlcChannel::Open(char *sendBuf, int *result)
 {
-   char res[] = "msg=OpenChannelResult\nresult-code=%d\n";
+   const char res[] = "msg=OpenChannelResult\nresult-code=%d\n";
    int slen, m;
    ParDevice *pD = (ParDevice *)pDev;
 
@@ -85,7 +85,7 @@
 
 int ParMlcChannel::Close(char *sendBuf, int *result)
 {
-   char res[] = "msg=ChannelCloseResult\nresult-code=%d\n";
+   const char res[] = "msg=ChannelCloseResult\nresult-code=%d\n";
    int len=0, m;
    ParDevice *pD = (ParDevice *)pDev;
 
diff -urNad hplip~/io/hpiod/ppdevice.cpp hplip/io/hpiod/ppdevice.cpp
--- hplip~/io/hpiod/ppdevice.cpp	2005-11-28 18:08:55.000000000 -0200
+++ hplip/io/hpiod/ppdevice.cpp	2005-12-07 01:17:46.012380586 -0200
@@ -637,7 +637,8 @@
 
 int ParDevice::GetDeviceStatus(char *sendBuf, int *result)
 {
-   char res[] = "msg=DeviceStatusResult\nresult-code=%d\nstatus-code=%d\nstatus-name=%s\n";
+   const char res[] = "msg=DeviceStatusResult\nresult-code=%d\nstatus-code=%d\nstatus-name=%s\n";
+   const char eres[] = "msg=DeviceStatusResult\nresult-code=%d\n";
    int len=0;
    unsigned char status;
    char vstatus[16];
@@ -659,6 +660,8 @@
          if (ioctl (OpenFD, PPNEGOT, &m))
          {
             syslog(LOG_ERR, "unable to read ParDevice::GetDeviceStatus: %m\n");
+            *result = R_IO_ERROR;
+            len = sprintf(sendBuf, eres, *result);  
             goto bugout;
          }
          status = read_status(OpenFD);
@@ -669,7 +672,7 @@
    {
       syslog(LOG_ERR, "unable to lock ParDevice::GetDeviceStatus: %m\n");
       *result = R_IO_ERROR;
-      len = sprintf(sendBuf, res, *result);  
+      len = sprintf(sendBuf, eres, *result);  
       goto bugout;
    }
 
@@ -692,7 +695,7 @@
 
 int ParDevice::GetDeviceID(char *sendBuf, int slen, int *result)
 {
-   char res[] = "msg=DeviceIDResult\nresult-code=%d\n";
+   const char res[] = "msg=DeviceIDResult\nresult-code=%d\n";
    int len=0, idLen, m;
 
    *result = R_AOK;
@@ -890,7 +893,7 @@
 
 int ParDevice::Close(char *sendBuf, int *result)
 {
-   char res[] = "msg=DeviceCloseResult\nresult-code=%d\n";
+   const char res[] = "msg=DeviceCloseResult\nresult-code=%d\n";
    int len=0;
 
    *result = R_AOK;
diff -urNad hplip~/io/hpiod/ppdot4.cpp hplip/io/hpiod/ppdot4.cpp
--- hplip~/io/hpiod/ppdot4.cpp	2005-10-11 20:35:06.000000000 -0300
+++ hplip/io/hpiod/ppdot4.cpp	2005-12-07 01:17:46.012380586 -0200
@@ -33,7 +33,7 @@
 
 int ParDot4Channel::Open(char *sendBuf, int *result)
 {
-   char res[] = "msg=OpenChannelResult\nresult-code=%d\n";
+   const char res[] = "msg=OpenChannelResult\nresult-code=%d\n";
    int slen, m;
    ParDevice *pD = (ParDevice *)pDev;
 
@@ -85,7 +85,7 @@
 
 int ParDot4Channel::Close(char *sendBuf, int *result)
 {
-   char res[] = "msg=ChannelCloseResult\nresult-code=%d\n";
+   const char res[] = "msg=ChannelCloseResult\nresult-code=%d\n";
    int len=0, m;
    ParDevice *pD = (ParDevice *)pDev;
 
diff -urNad hplip~/io/hpiod/system.cpp hplip/io/hpiod/system.cpp
--- hplip~/io/hpiod/system.cpp	2005-11-22 21:23:12.000000000 -0200
+++ hplip/io/hpiod/system.cpp	2005-12-07 01:17:46.013380461 -0200
@@ -857,7 +857,7 @@
 ******************************************************************************/
 int System::SetPml(int device, int channel, char *snmp_oid, int type, unsigned char *data, int dataLen, char *sendBuf)
 {
-   char res[] = "msg=SetPMLResult\nresult-code=%d\n";
+   const char res[] = "msg=SetPMLResult\nresult-code=%d\n";
    char message[BUFFER_SIZE];
    unsigned char oid[LINE_SIZE];
    unsigned char *p=(unsigned char *)message;
@@ -941,7 +941,7 @@
 ******************************************************************************/
 int System::GetPml(int device, int channel, char *snmp_oid, char *sendBuf)
 {
-   char res[] = "msg=GetPMLResult\nresult-code=%d\n";
+   const char res[] = "msg=GetPMLResult\nresult-code=%d\n";
    char message[BUFFER_SIZE];
    unsigned char oid[LINE_SIZE];
    //   unsigned char cmd[LINE_SIZE+3];
@@ -1038,7 +1038,7 @@
 ******************************************************************************/
 int System::MakeUriFromIP(char *ip, int port, char *sendBuf)
 {
-   char res[] = "msg=MakeURIResult\nresult-code=%d\n";
+   const char res[] = "msg=MakeURIResult\nresult-code=%d\n";
    int len=0, result, dt, status;
    char devid[1024];
    char model[128];
@@ -1076,7 +1076,7 @@
 ******************************************************************************/
 int System::MakeUriFromUsb(char *dnode, char *sendBuf)
 {
-   char res[] = "msg=MakeURIResult\nresult-code=%d\n";
+   const char res[] = "msg=MakeURIResult\nresult-code=%d\n";
    MsgAttributes ma;
    char model[128];
    char serial[128];
@@ -1135,7 +1135,7 @@
 ******************************************************************************/
 int System::MakeUriFromPar(char *dnode, char *sendBuf)
 {
-   char res[] = "msg=MakeURIResult\nresult-code=%d\n";
+   const char res[] = "msg=MakeURIResult\nresult-code=%d\n";
    MsgAttributes ma;
    char model[128];
    char dummyBuf[2048];
@@ -1466,6 +1466,9 @@
             if (ma->prt_mode == UNI_MODE)
             {
                pD = new UniUsbDevice(this);
+               pD->SetPrintMode(ma->prt_mode);            /* io mode for printing */
+               pD->SetMfpMode(ma->mfp_mode);              /* io mode for mfp functions */
+               pD->SetFlowCtl(ma->flow_ctl);              /* flow control for mfp mode */
             }
             else
             {
@@ -1486,6 +1489,9 @@
             if (ma->prt_mode == UNI_MODE)
             {
                pD = new UniParDevice(this);
+               pD->SetPrintMode(ma->prt_mode);            /* io mode for printing */
+               pD->SetMfpMode(ma->mfp_mode);              /* io mode for mfp functions */
+               pD->SetFlowCtl(ma->flow_ctl);              /* flow control for mfp mode */
             }
             else
             {
@@ -1582,11 +1588,11 @@
    if (ma.length == 0)
    {
       recvBuf[rlen]=0;
-      syslog(LOG_INFO, "tid:%x %s\n", (int)psa->tid, recvBuf);
+      syslog(LOG_INFO, "tid:%d %s\n", (int)psa->tid, recvBuf);
    }
    else
    {
-      syslog(LOG_INFO, "tid:%x %s di=%d ci=%d oid=%s pml_type=%d size=%d\n", psa->tid, ma.cmd, ma.descriptor, ma.channel, ma.oid, ma.type, ma.length);
+      syslog(LOG_INFO, "tid:%d %s di=%d ci=%d oid=%s pml_type=%d size=%d\n", (int)psa->tid, ma.cmd, ma.descriptor, ma.channel, ma.oid, ma.type, ma.length);
       if (ma.length < 64)
         sysdump(ma.data, ma.length);
    }
@@ -1597,33 +1603,8 @@
    //   } 
 #endif
 
-   if (strcasecmp(ma.cmd, "DeviceID") == 0) 
-   {
-      len = pDevice[ma.descriptor]->GetDeviceID(sendBuf, slen, &ret);
-   }
-   else if (strcasecmp(ma.cmd, "DeviceStatus") == 0)
-   {
-      len = pDevice[ma.descriptor]->GetDeviceStatus(sendBuf, &ret);       
-   }
-   else if (strcasecmp(ma.cmd, "ChannelDataOut") == 0)
-   {
-      pD = pDevice[ma.descriptor];
-      len = pD->WriteData(ma.data, ma.length, ma.channel, sendBuf, &ret);               
-   }
-   else if (strcasecmp(ma.cmd, "ChannelDataIn") == 0)
-   {
-      pD = pDevice[ma.descriptor];
-      len = pD->ReadData(ma.readlen, ma.channel, ma.timeout, sendBuf, slen, &ret);       
-   }
-   else if (strcasecmp(ma.cmd, "SetPML") == 0)
-   {
-      len = SetPml(ma.descriptor, ma.channel, ma.oid, ma.type, ma.data, ma.length, sendBuf);       
-   }
-   else if (strcasecmp(ma.cmd, "GetPML") == 0)
-   {
-      len = GetPml(ma.descriptor, ma.channel, ma.oid, sendBuf);       
-   }
-   else if (strcasecmp(ma.cmd, "DeviceOpen") == 0)
+   /* Check for state less commands first. */
+   if (strcasecmp(ma.cmd, "DeviceOpen") == 0)
    {
       if (psa->descriptor != -1)
          len = sprintf(sendBuf, ERR_MSG, R_INVALID_DEVICE_OPEN); /* allow only one DeviceOpen per session */
@@ -1644,27 +1625,6 @@
          }
       }
    }
-   else if (strcasecmp(ma.cmd, "DeviceClose") == 0)
-   {
-      pD = pDevice[ma.descriptor];
-      len = pD->Close(sendBuf, &ret);
-      DelDevice(ma.descriptor);
-      psa->descriptor = -1;  /*  track device descriptor for session clean up */     
-   }
-   else if (strcasecmp(ma.cmd, "ChannelOpen") == 0)
-   {
-      int channel;
-      pD = pDevice[ma.descriptor];
-      len = pD->ChannelOpen(ma.service, &channel, sendBuf, &ret);
-      if (ret == R_AOK)
-         psa->channel[channel] = 1;   /* track channel descriptor for session clean up */
-   }
-   else if (strcasecmp(ma.cmd, "ChannelClose") == 0)
-   {
-      pD = pDevice[ma.descriptor];
-      len = pD->ChannelClose(ma.channel, sendBuf, &ret);
-      psa->channel[ma.channel] = 0;   /* track channel descriptor for session clean up */
-   }
    else if (strcasecmp(ma.cmd, "ProbeDevices") == 0)
    {
       len = ProbeDevices(sendBuf, ma.bus);       
@@ -1684,9 +1644,68 @@
    }
    else
    {
-      /* Unknown message. */
-      syslog(LOG_ERR, "invalid message:%s\n", ma.cmd);
-      len = sprintf(sendBuf, ERR_MSG, R_INVALID_MESSAGE);
+      /* The following commands require a valid device descriptor. */ 
+      if (ma.descriptor < 0)
+      {
+         syslog(LOG_ERR, "invalid message: %s %d\n", __FILE__, __LINE__);
+         sysdump(recvBuf, rlen);
+         len = sprintf(sendBuf, ERR_MSG, R_INVALID_MESSAGE);
+         goto bugout;
+      }
+
+      if (strcasecmp(ma.cmd, "DeviceID") == 0) 
+      {
+         len = pDevice[ma.descriptor]->GetDeviceID(sendBuf, slen, &ret);
+      }
+      else if (strcasecmp(ma.cmd, "DeviceStatus") == 0)
+      {
+         len = pDevice[ma.descriptor]->GetDeviceStatus(sendBuf, &ret);       
+      }
+      else if (strcasecmp(ma.cmd, "ChannelDataOut") == 0)
+      {
+         pD = pDevice[ma.descriptor];
+         len = pD->WriteData(ma.data, ma.length, ma.channel, sendBuf, &ret);               
+      }
+      else if (strcasecmp(ma.cmd, "ChannelDataIn") == 0)
+      {
+         pD = pDevice[ma.descriptor];
+         len = pD->ReadData(ma.readlen, ma.channel, ma.timeout, sendBuf, slen, &ret);       
+      }
+      else if (strcasecmp(ma.cmd, "SetPML") == 0)
+      {
+         len = SetPml(ma.descriptor, ma.channel, ma.oid, ma.type, ma.data, ma.length, sendBuf);       
+      }
+      else if (strcasecmp(ma.cmd, "GetPML") == 0)
+      {
+         len = GetPml(ma.descriptor, ma.channel, ma.oid, sendBuf);       
+      }
+      else if (strcasecmp(ma.cmd, "DeviceClose") == 0)
+      {
+         pD = pDevice[ma.descriptor];
+         len = pD->Close(sendBuf, &ret);
+         DelDevice(ma.descriptor);
+         psa->descriptor = -1;  /*  track device descriptor for session clean up */     
+      }
+      else if (strcasecmp(ma.cmd, "ChannelOpen") == 0)
+      {
+         int channel;
+         pD = pDevice[ma.descriptor];
+         len = pD->ChannelOpen(ma.service, &channel, sendBuf, &ret);
+         if (ret == R_AOK)
+            psa->channel[channel] = 1;   /* track channel descriptor for session clean up */
+      }
+      else if (strcasecmp(ma.cmd, "ChannelClose") == 0)
+      {
+         pD = pDevice[ma.descriptor];
+         len = pD->ChannelClose(ma.channel, sendBuf, &ret);
+         psa->channel[ma.channel] = 0;   /* track channel descriptor for session clean up */
+      }
+      else
+      {
+         /* Unknown message. */
+         syslog(LOG_ERR, "invalid message:%s\n", ma.cmd);
+         len = sprintf(sendBuf, ERR_MSG, R_INVALID_MESSAGE);
+      }
    }
 
 bugout:
@@ -1695,11 +1714,11 @@
    ParseMsg(sendBuf, len, &ma);
    if (ma.length == 0)
    {
-      syslog(LOG_INFO, "-tid:%x %s\n", (int)psa->tid, sendBuf);
+      syslog(LOG_INFO, "-tid:%d %s\n", (int)psa->tid, sendBuf);
    }
    else
    {
-      syslog(LOG_INFO, "-tid:%x %s di=%d ci=%d result=%d pml_result=%d pml_type=%d size=%d\n", psa->tid, ma.cmd, ma.descriptor, ma.channel, ma.result, ma.pml_result, ma.type, ma.length);
+      syslog(LOG_INFO, "-tid:%d %s di=%d ci=%d result=%d pml_result=%d pml_type=%d size=%d\n", (int)psa->tid, ma.cmd, ma.descriptor, ma.channel, ma.result, ma.pml_result, ma.type, ma.length);
       if (ma.length < 64)
         sysdump(ma.data, ma.length);
    }
diff -urNad hplip~/io/hpiod/udevice.cpp hplip/io/hpiod/udevice.cpp
--- hplip~/io/hpiod/udevice.cpp	2005-11-22 21:23:12.000000000 -0200
+++ hplip/io/hpiod/udevice.cpp	2005-12-07 01:17:46.013380461 -0200
@@ -27,7 +27,7 @@
 
 int UniUsbDevice::GetDeviceStatus(char *sendBuf, int *result)
 {
-   char res[] = "msg=DeviceStatusResult\nresult-code=%d\nstatus-code=%d\nstatus-name=%s\n";
+   const char res[] = "msg=DeviceStatusResult\nresult-code=%d\nstatus-code=%d\nstatus-name=%s\n";
    int len=0;
    unsigned char status = NFAULT_BIT;
 
@@ -40,7 +40,7 @@
 
 int UniUsbDevice::GetDeviceID(char *sendBuf, int slen, int *result)
 {
-   char res[] = "msg=DeviceIDResult\nresult-code=%d\n";
+   const char res[] = "msg=DeviceIDResult\nresult-code=%d\n";
    int len=0, idLen;
 
    *result = R_AOK;
@@ -148,7 +148,7 @@
 
 int UniUsbDevice::ReadData(int length, int channel, int timeout, char *sendBuf, int slen, int *result)
 {   
-   char res[] = "msg=ChannelDataInResult\nresult-code=%d\n";
+   const char res[] = "msg=ChannelDataInResult\nresult-code=%d\n";
    int sLen;
 
    syslog(LOG_ERR, "invalid commnad UniUsbDevice::ReadData: %m\n");
diff -urNad hplip~/io/hpiod/uppdevice.cpp hplip/io/hpiod/uppdevice.cpp
--- hplip~/io/hpiod/uppdevice.cpp	2005-11-22 21:23:12.000000000 -0200
+++ hplip/io/hpiod/uppdevice.cpp	2005-12-07 01:17:46.014380335 -0200
@@ -29,7 +29,7 @@
 
 int UniParDevice::GetDeviceStatus(char *sendBuf, int *result)
 {
-   char res[] = "msg=DeviceStatusResult\nresult-code=%d\nstatus-code=%d\nstatus-name=%s\n";
+   const char res[] = "msg=DeviceStatusResult\nresult-code=%d\nstatus-code=%d\nstatus-name=%s\n";
    int len=0;
    unsigned char status = NFAULT_BIT;
 
@@ -42,7 +42,7 @@
 
 int UniParDevice::GetDeviceID(char *sendBuf, int slen, int *result)
 {
-   char res[] = "msg=DeviceIDResult\nresult-code=%d\n";
+   const char res[] = "msg=DeviceIDResult\nresult-code=%d\n";
    int len=0, idLen;
 
    *result = R_AOK;
@@ -158,7 +158,7 @@
 
 int UniParDevice::ReadData(int length, int channel, int timeout, char *sendBuf, int slen, int *result)
 {   
-   char res[] = "msg=ChannelDataInResult\nresult-code=%d\n";
+   const char res[] = "msg=ChannelDataInResult\nresult-code=%d\n";
    int sLen;
 
    syslog(LOG_ERR, "invalid command UniParDevice::ReadData: %m\n");
diff -urNad hplip~/prnt/hpijs/djgenericvip.cpp hplip/prnt/hpijs/djgenericvip.cpp
--- hplip~/prnt/hpijs/djgenericvip.cpp	2005-10-13 07:32:26.000000000 -0300
+++ hplip/prnt/hpijs/djgenericvip.cpp	2005-12-07 01:17:46.014380335 -0200
@@ -350,6 +350,14 @@
         fMargins[3] = (float) 0.125;
     }
 
+    if (ps == SUPERB_SIZE)
+    {
+        fMargins[0] = (float) 0.125;
+        fMargins[1] = (float) 0.5;
+        fMargins[2] = (float) 0.125;
+        fMargins[3] = (float) 0.75;
+    }
+
     return TRUE;
 }
 
diff -urNad hplip~/prnt/hpijs/ojprokx50.h hplip/prnt/hpijs/ojprokx50.h
--- hplip~/prnt/hpijs/ojprokx50.h	2005-11-22 21:23:13.000000000 -0200
+++ hplip/prnt/hpijs/ojprokx50.h	2005-12-07 01:17:46.023379206 -0200
@@ -51,6 +51,13 @@
         fMargins[1] = (float) 0.125;
         fMargins[2] = (float) 0.125;
         fMargins[3] = (float) 0.5;
+        if (ps == SUPERB_SIZE)
+        {
+            fMargins[0] = (float) 0.125;
+            fMargins[1] = (float) 0.5;
+            fMargins[2] = (float) 0.125;
+            fMargins[3] = (float) 0.75;
+        }
 	    return TRUE;
 	}
 };
diff -urNad hplip~/scan/sane/hpaio.h hplip/scan/sane/hpaio.h
--- hplip~/scan/sane/hpaio.h	2005-11-22 21:23:18.000000000 -0200
+++ hplip/scan/sane/hpaio.h	2005-12-07 01:17:46.023379206 -0200
@@ -29,12 +29,11 @@
 #if !defined( __HPAIO_H__ )
 #define __HPAIO_H__
 
-#include <stdio.h>
-
-#ifndef __USE_GNU
-#define __USE_GNU
+#ifndef _GNU_SOURCE
+#define _GNU_SOURCE
 #endif
 
+#include <stdio.h>
 #include <sys/time.h>
 #include <time.h>
 #include <string.h>
