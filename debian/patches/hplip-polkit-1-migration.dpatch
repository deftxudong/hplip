#! /bin/sh /usr/share/dpatch/dpatch-run
## hplip-polkit-1-migration.dpatch by  <till.kamppeter@gmail.com>
##
## All lines beginning with `## DP:' are a description of the patch.
## DP: No description.

@DPATCH@
diff -urNad hplip-3.9.8~/Makefile.am hplip-3.9.8/Makefile.am
--- hplip-3.9.8~/Makefile.am	2009-09-02 17:08:02.000000000 +0200
+++ hplip-3.9.8/Makefile.am	2009-09-02 17:08:28.000000000 +0200
@@ -313,7 +313,7 @@
 dist_policykit_dbus_etc_DATA = data/policykit/com.hp.hplip.conf
 policykit_dbus_sharedir = /usr/share/dbus-1/system-services
 dist_policykit_dbus_share_DATA = data/policykit/com.hp.hplip.service
-policykit_policydir = /usr/share/PolicyKit/policy
+policykit_policydir = $(policykit_dir)
 dist_policykit_policy_DATA = data/policykit/com.hp.hplip.policy
 endif
 
diff -urNad hplip-3.9.8~/base/pkit.py hplip-3.9.8/base/pkit.py
--- hplip-3.9.8~/base/pkit.py	2009-08-04 23:37:32.000000000 +0200
+++ hplip-3.9.8/base/pkit.py	2009-09-02 17:08:28.000000000 +0200
@@ -130,9 +130,9 @@
 
 
 class PolicyKitService(dbus.service.Object):
-    def check_permission(self, sender, action=POLICY_KIT_ACTION):
+    def check_permission_v0(self, sender, action=POLICY_KIT_ACTION):
         if not sender:
-            log.syslog("Session not authorized by PolicyKit")
+            log.error("Session not authorized by PolicyKit")
             raise AccessDeniedException('Session not authorized by PolicyKit')
 
         try:
@@ -146,14 +146,14 @@
 
             granted = policy_auth.is_authorized(action, pid)
             if not granted:
-                log.syslog("Process not authorized by PolicyKit")
+                log.error("Process not authorized by PolicyKit")
                 raise AccessDeniedException('Process not authorized by PolicyKit')
 
             granted = policy_auth.policy_kit.IsSystemBusNameAuthorized(action,
                                                                        sender,
                                                                        False)
             if granted != 'yes':
-                log.syslog("Session not authorized by PolicyKit")
+                log.error("Session not authorized by PolicyKit version 0")
                 raise AccessDeniedException('Session not authorized by PolicyKit')
 
         except AccessDeniedException:
@@ -165,13 +165,48 @@
             raise AccessDeniedException(ex.message)
 
 
+    def check_permission_v1(self, sender, connection, action=POLICY_KIT_ACTION):
+        if not sender or not connection:
+            log.error("Session not authorized by PolicyKit")
+            raise AccessDeniedException('Session not authorized by PolicyKit')
+
+        system_bus = dbus.SystemBus()
+        obj = system_bus.get_object("org.freedesktop.PolicyKit1",
+                                    "/org/freedesktop/PolicyKit1/Authority",
+                                    "org.freedesktop.PolicyKit1.Authority")
+        policy_kit = dbus.Interface(obj, "org.freedesktop.PolicyKit1.Authority")
+        info = dbus.Interface(connection.get_object("org.freedesktop.DBus",
+                                                    "/org/freedesktop/DBus/Bus",
+                                                    False),
+                              "org.freedesktop.DBus")
+        pid = info.GetConnectionUnixProcessID(sender)
+        
+        subject = (
+            'unix-process',
+            { 'pid' : dbus.UInt32(pid, variant_level = 1) }
+        )
+        details = { '' : '' }
+        flags = dbus.UInt32(1)         # AllowUserInteraction = 0x00000001
+        cancel_id = ''
+
+        (ok, notused, details) = \
+            policy_kit.CheckAuthorization(subject,
+                                          action,
+                                          details,
+                                          flags,
+                                          cancel_id)
+        if not ok:
+            log.error("Session not authorized by PolicyKit version 1")
+
+        return ok
+
 
 class BackendService(PolicyKitService):
     INTERFACE_NAME = 'com.hp.hplip'
     SERVICE_NAME   = 'com.hp.hplip'
-    IDLE_TIMEOUT   =  30
+    LOGFILE_NAME   = '/tmp/hp-pkservice.log'
 
-    def __init__(self, connection=None, path='/'):
+    def __init__(self, connection=None, path='/', logfile=LOGFILE_NAME):
         if connection is None:
             connection = get_service_bus()
 
@@ -179,26 +214,50 @@
 
         self.name = dbus.service.BusName(self.SERVICE_NAME, connection)
         self.loop = gobject.MainLoop()
+        self.version = 0
 
+        log.set_logfile("%s.%d" % (logfile, os.getpid()))
+        log.set_level("debug")
+
+    def run(self, version=None):
+        if version is None:
+            version = policykit_version()
+            if version is None:
+                log.error("Unable to determine installed PolicyKit version")
+                return
+
+        self.version = version
+        log.set_where(Logger.LOG_TO_CONSOLE_AND_FILE)
+        log.debug("Starting back-end service loop (version %d)" % version)
 
-    def run(self):
-        log.debug("Starting back-end service loop")
-#       self.start_idle_timeout()
         self.loop.run()
 
+
     @dbus.service.method(dbus_interface=INTERFACE_NAME,
                             in_signature='s', out_signature='b',
-                            sender_keyword='sender')
-    def installPlugin(self, src_dir, sender=None):
-        try:
-            self.check_permission(sender, INSTALL_PLUGIN_ACTION)
-        except AccessDeniedException, e:
+                            sender_keyword='sender',
+                            connection_keyword='connection')
+    def installPlugin(self, src_dir, sender=None, connection=None):
+        if self.version == 0:
+            try:
+                self.check_permission_v0(sender, INSTALL_PLUGIN_ACTION)
+            except AccessDeniedException, e:
+                return False
+
+        elif self.version == 1:
+            if not self.check_permission_v1(sender,
+                                            connection,
+                                            INSTALL_PLUGIN_ACTION):
+                return False
+
+        else:
+            log.error("installPlugin: invalid PolicyKit version %d" % self.version)
             return False
 
-        log.debug("installPlugin: received '%s'" % src_dir)
+        log.debug("installPlugin: installing from '%s'" % src_dir)
 
         if not copyPluginFiles(src_dir):
-            log.syslog("Plugin installation failed")
+            log.error("Plugin installation failed")
             return False
 
         return True
@@ -206,8 +265,9 @@
 
     @dbus.service.method(dbus_interface=INTERFACE_NAME,
                             in_signature='', out_signature='b',
-                            sender_keyword='sender')
-    def shutdown(self, sender=None):
+                            sender_keyword='sender',
+                            connection_keyword='connection')
+    def shutdown(self, sender=None, connection=None):
         log.debug("Stopping backend service")
         self.loop.quit()
 
@@ -216,17 +276,24 @@
 
 
 class PolicyKit(object):
-    def __init__(self):
+    def __init__(self, version=None):
+        if version is None:
+            version = policykit_version()
+            if version is None:
+                log.error("Unable to determine installed PolicyKit version")
+                return
+
         self.bus = dbus.SystemBus()
         self.obj = self.bus.get_object(POLICY_KIT_ACTION, "/")
         self.iface = dbus.Interface(self.obj, dbus_interface=POLICY_KIT_ACTION)
-
+        self.version = version
 
     def installPlugin(self, src_dir):
-        auth = PolicyKitAuthentication()
-        if not auth.is_authorized(INSTALL_PLUGIN_ACTION):
-            if not auth.obtain_authorization(INSTALL_PLUGIN_ACTION):
-                return None
+        if self.version == 0:
+            auth = PolicyKitAuthentication()
+            if not auth.is_authorized(INSTALL_PLUGIN_ACTION):
+                if not auth.obtain_authorization(INSTALL_PLUGIN_ACTION):
+                    return None
 
         try:
             ok = self.iface.installPlugin(src_dir)
@@ -237,10 +304,11 @@
 
 
     def shutdown(self):
-        auth = PolicyKitAuthentication()
-        if not auth.is_authorized(INSTALL_PLUGIN_ACTION):
-            if not auth.obtain_authorization(INSTALL_PLUGIN_ACTION):
-                return None
+        if self.version == 0:
+            auth = PolicyKitAuthentication()
+            if not auth.is_authorized(INSTALL_PLUGIN_ACTION):
+                if not auth.obtain_authorization(INSTALL_PLUGIN_ACTION):
+                    return None
 
         try:
             ok = self.iface.shutdown()
@@ -287,7 +355,7 @@
         for s in plugin_spec.get("products", PRODUCT).split(','):
 
             if not plugin_spec.has_section(s):
-                log.syslog("Missing section [%s]" % s)
+                log.error("Missing section [%s]" % s)
                 return False
 
             src = plugin_spec.get(s, 'src', '')
@@ -295,11 +363,11 @@
             link = plugin_spec.get(s, 'link', '')
 
             if not src:
-                log.syslog("Missing 'src=' value in section [%s]" % s)
+                log.error("Missing 'src=' value in section [%s]" % s)
                 return False
 
             if not trg:
-                log.syslog("Missing 'trg=' value in section [%s]" % s)
+                log.error("Missing 'trg=' value in section [%s]" % s)
                 return False
 
             src = os.path.basename(utils.cat(src))
@@ -332,18 +400,18 @@
             os.makedirs(trg_dir, 0755)
 
         if not os.path.isdir(trg_dir):
-            log.syslog("Target directory %s exists but is not a directory. Skipping." % trg_dir)
+            log.error("Target directory %s exists but is not a directory. Skipping." % trg_dir)
             continue
 
         try:
             shutil.copyfile(src, trg)
         except (IOError, OSError), e:
-            log.syslog("File copy failed: %s" % e.strerror)
+            log.error("File copy failed: %s" % e.strerror)
             continue
 
         else:
             if not os.path.exists(trg):
-                log.syslog("Target file %s does not exist. File copy failed." % trg)
+                log.error("Target file %s does not exist. File copy failed." % trg)
                 continue
             else:
                 os.chmod(trg, stat.S_IRWXU | stat.S_IRGRP | stat.S_IXGRP | stat.S_IROTH)
@@ -406,3 +474,12 @@
     status, output = utils.run(cmd, log_output=True, password_func=None, timeout=1)
 
     return (status == 0, True)
+
+
+def policykit_version():
+    if os.path.isdir("/usr/share/polkit-1"):
+        return 1
+    elif os.path.isdir("/usr/share/PolicyKit"):
+        return 0
+    else:
+        return None
diff -urNad hplip-3.9.8~/configure.in hplip-3.9.8/configure.in
--- hplip-3.9.8~/configure.in	2009-09-02 17:08:02.000000000 +0200
+++ hplip-3.9.8/configure.in	2009-09-02 17:08:28.000000000 +0200
@@ -400,6 +400,19 @@
 fi
 AM_CONDITIONAL(POLICYKIT_INSTALL, test x$policykit = xyes)
 
+# Determine where the PolicyKit policy file goes
+if test "$policykit" = "yes"; then
+   if test -d /usr/share/polkit-1; then
+      policykit_dir=/usr/share/polkit-1/actions
+   elif test -d /usr/share/PolicyKit; then
+      policykit_dir=/usr/share/PolicyKit/policy
+   else
+      policykit_dir=/usr/share/PolicyKit/policy
+   fi
+else
+   policykit_dir=
+fi
+
 AC_MSG_CHECKING(for host machine platform)
 machine=`uname -m`
 if test "$machine" = "x86_32" || test "$machine" = "i686"; then
@@ -546,6 +559,7 @@
 AC_SUBST(epm_lite)
 AC_SUBST(epm_scan)
 AC_SUBST(policykit)
+AC_SUBST(policykit_dir)
 AC_SUBST(hpijs_only_build)
 AC_SUBST(lite_build)
 AC_SUBST(SNMPLIB)
diff -urNad hplip-3.9.8~/pkservice.py hplip-3.9.8/pkservice.py
--- hplip-3.9.8~/pkservice.py	2009-08-04 23:37:39.000000000 +0200
+++ hplip-3.9.8/pkservice.py	2009-09-02 17:08:28.000000000 +0200
@@ -52,12 +52,34 @@
 mod = module.Module(__mod__, __title__, __version__, __doc__, USAGE,
                     (INTERACTIVE_MODE, ), run_as_root_ok=True)
 
-opts, device_uri, printer_name, mode, ui_toolkit, loc = mod.parseStdOpts()
+mod.setUsage(module.USAGE_FLAG_NONE,
+    extra_options=[utils.USAGE_SPACE,
+    ("[OPTIONS] (General)", "", "header", False),
+    ("PolicyKit version:", "-v<version> or --version=<version>", "option", False)])
+
+opts, device_uri, printer_name, mode, ui_toolkit, loc = \
+    mod.parseStdOpts('v:', ["version="])
+
+user_pkit_version = None
+
+for o, a in opts:
+    if o in ('-v', '--version'):
+        try:
+            user_pkit_version = int(a)
+        except:
+            log.error("-v or --version require an integer argument")
+            sys.exit(1)
+        if user_pkit_version < 0 or user_pkit_version > 1:
+            log.error("invalid PolicyKit version...use 0 or 1")
+            sys.exit(1)
 
 PKIT = utils.to_bool(sys_conf.get('configure', 'policy-kit'))
 if PKIT:
     try:
         from base.pkit import *
+        pkit_version = policykit_version()
+        if not user_pkit_version is None:
+            pkit_version = user_pkit_version
         try:
             from dbus.mainloop.glib import DBusGMainLoop
         except ImportError:
@@ -76,7 +98,9 @@
     log.error("You must be root to run this utility.")
     sys.exit(1)
 
+log.debug("using PolicyKit version %d" % pkit_version)
+
 try:
-    BackendService().run()
+    BackendService().run(pkit_version)
 except dbus.DBusException, ex:
-    log.error("Unable to start service...possible configuration file problem")
+    log.error("Unable to start service (%s)" % ex)
