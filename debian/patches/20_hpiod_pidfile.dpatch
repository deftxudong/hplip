#!/bin/sh -e
## hpiod_pidfile.dpatch by Henrique M. Holschuh <hmh@debian.org>
##
## All lines beginning with `## DP:' are a description of the patch.
## DP: pidfile locking support for hpiod

if [ $# -ne 1 ]; then
    echo >&2 "`basename $0`: script expects -patch|-unpatch as argument"
    exit 1
fi

[ -f debian/patches/00patch-opts ] && . debian/patches/00patch-opts
patch_opts="${patch_opts:--f --no-backup-if-mismatch}"

case "$1" in
       -patch) patch $patch_opts -p1 < $0;;
       -unpatch) patch $patch_opts -p1 -R < $0;;
        *)
                echo >&2 "`basename $0`: script expects -patch|-unpatch as argument"
                exit 1;;
esac

exit 0

@DPATCH@
diff -urNad hplip/io/hpiod/hpiod.cpp /tmp/dpep.SvoEzH/hplip/io/hpiod/hpiod.cpp
--- hplip/io/hpiod/hpiod.cpp	2005-01-21 11:52:59.000000000 -0200
+++ /tmp/dpep.SvoEzH/hplip/io/hpiod/hpiod.cpp	2005-01-21 11:59:46.000000000 -0200
@@ -181,6 +181,50 @@
    free(psa);
 }
 
+/*
+ * Write our pid to our pidfile, and lock it
+ */
+static void get_lock(const char* pidfile_name)
+{
+	static FILE *daemon_lockfp = NULL;	/* Lockfile file pointer */
+	static int daemon_lockfd;		/* Lockfile file descriptor */
+	int otherpid = 0;
+	int r;
+
+	if (!daemon_lockfp) {
+		if (((daemon_lockfd = open(pidfile_name, O_RDWR|O_CREAT, 0644)) == -1)
+		|| ((daemon_lockfp = fdopen(daemon_lockfd, "r+"))) == NULL) {
+			fprintf(stderr, "can't open or create %s: %s\n", 
+			pidfile_name, strerror(errno));
+		   exit(EXIT_FAILURE);
+		}
+		fcntl(daemon_lockfd, F_SETFD, 1);
+
+		do {
+			r = flock(daemon_lockfd, LOCK_EX|LOCK_NB);
+		} while (r && (errno == EINTR));
+
+		if (r) {
+			if (errno == EWOULDBLOCK) {
+				rewind(daemon_lockfp);
+				fscanf(daemon_lockfp, "%d", &otherpid);
+				fprintf(stderr,
+					"can't lock %s, running daemon's pid may be %d\n",
+					pidfile_name, otherpid);
+			} else {
+				fprintf(stderr, "can't lock %s: %s\n",
+					pidfile_name, strerror(errno));
+			}
+			exit(EXIT_FAILURE);
+		}
+	}
+
+	rewind(daemon_lockfp);
+	fprintf(daemon_lockfp, "%ld\n", (long int) getpid());
+	fflush(daemon_lockfp);
+	ftruncate(fileno(daemon_lockfp), ftell(daemon_lockfp));
+}
+
 int main(int argc, char *argv[])
 {
    pid_t pid, sid;
@@ -211,6 +255,9 @@
       exit(EXIT_FAILURE);
    }
 
+   /* Initial pidfile lock */
+   get_lock(PIDFILE);
+
    pid = fork();
    if(pid < 0) 
    {
@@ -220,6 +267,9 @@
    if(pid > 0) 
       exit(EXIT_SUCCESS);
 
+   /* Update pidfile lock */
+   get_lock(NULL);
+
    /* First, start a new session */
    if((sid = setsid()) < 0)
    {
diff -urNad hplip/io/hpiod/hpiod.h /tmp/dpep.SvoEzH/hplip/io/hpiod/hpiod.h
--- hplip/io/hpiod/hpiod.h	2005-01-21 11:52:59.000000000 -0200
+++ /tmp/dpep.SvoEzH/hplip/io/hpiod/hpiod.h	2005-01-21 11:59:46.000000000 -0200
@@ -28,6 +28,7 @@
 
 #include <sys/types.h>
 #include <sys/stat.h>
+#include <sys/file.h>
 #include <fcntl.h>
 #include <stdio.h>
 #include <stdlib.h>
@@ -47,7 +48,8 @@
 
 //#define HPIOD_DEBUG
 
-#define RCFILE "/etc/hp/hplip.conf" /* The config file */
+#define RCFILE  "/etc/hp/hplip.conf" /* The config file */
+#define PIDFILE "/var/run/hpiod.pid" /* The pidfile */
 #define LINE_SIZE 256     /* Length of a line. */
 #define BUFFER_SIZE 8192  /* General Read/Write buffer. */
 #define MAX_DEVICE 16     /* Max devices. */
